# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hnzHXwyYvHEeO5ZJoGY8ATyWcI0cwQyP
"""

import pandas as pd
import numpy as np

data=pd.read_csv('HR_comma_sep.csv')

data.head()

data.info()

data=data.drop(['sales','last_evaluation'],axis=1)

def remove_outlier(data,columns):
  for column in columns:
    q1=data[column].quantile(0.25)
    q3=data[column].quantile(0.75)
    iqr=q3-q1
    lower=q1-1.5*iqr
    upper=q3+1.5*iqr
    data_fi=data[(data[column]>=lower)&(data[column]<=upper)]
  return data_fi

columns=['promotion_last_5years','left','Work_accident','time_spend_company']
data=remove_outlier(data,columns)

from sklearn.preprocessing import OrdinalEncoder

# Assuming 'data' is your DataFrame
oe = OrdinalEncoder()

# Reshape the 'salary' column
salary_column_reshaped = data['salary'].values.reshape(-1, 1)

# Fit and transform the reshaped column
data['salary'] = oe.fit_transform(salary_column_reshaped)



data=data.drop_duplicates()

data

data.columns

x =data.drop('left',axis=1)
y = data['left']



from sklearn.metrics import accuracy_score, confusion_matrix,precision_score
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)

print("Precision=",precision_score(y_test,y_pred))
print("Accuracy Score=",accuracy_score(y_test,y_pred))
print("Confusion Matrix=",confusion_matrix(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier


rf_classifier = RandomForestClassifier(n_estimators=1000, random_state=42)
rf_classifier.fit(x_train, y_train)
y_pred = rf_classifier.predict(x_test)
print("Precision=",precision_score(y_test,y_pred))
print("Accuracy Score=",accuracy_score(y_test,y_pred))
print("Confusion Matrix=",confusion_matrix(y_test,y_pred))

from sklearn.neighbors import KNeighborsClassifier
metric_k=[]
neighbors=np.arange(3,15)

for k in neighbors:
  classifier=KNeighborsClassifier(n_neighbors=k,metric='euclidean',p=2)
  classifier.fit(x_train,y_train)
  y_prediction=classifier.predict(x_test)
  acc=accuracy_score(y_test,y_prediction)
  metric_k.append(acc)

print("Precision=",precision_score(y_test,y_prediction))
print("Accuracy Score=",accuracy_score(y_test,y_prediction))
print("Confusion Matrix=",confusion_matrix(y_test,y_prediction))

